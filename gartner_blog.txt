Microservices have quite a bit of upside in many big business contexts, however it may not neccesarily be the right model for every deployable service. Though microservices are highly scalable and can be built in a highly independent manner, they come with a great deal of logistical overhead. If a developer decides to use the microservice architecture in his or her project they will likely experience regret if the founding reasons behind the  microservice architecture are crystally understood.

As with the many other techy buzzwords in the software industry, it is tempting to use a microservice architecture in every future deployment of our careers, but the old adage "if ain't broke don't fix it" provides an excellent reason not to. The most critical thing to know when consider a microservice approach is that there is a massive overhead when it comes to organizing and encouraging programmers to accept the rules of the design. If you've ever heard someone say "this is not the <insert framework> way" when talking with programmer than you know that sometimes, regardless of the suggestions we recieve in a certain project context it can be all too easy to do things our way. In order to get a group of people writing real microservices, you need a team that understands the benefits to the design and is willing to forgo likely instinct to preserve them. It would be wrong if programmers wrote code following a loose guide of general microservice architectural rules only to (often subconsciously) discover loop holes for forcing familiar patterns. There is not perfect rulebook for microservices. Developers should appreciate the architecture's specialties and constraints if a good implementation is to be had. Without this you may spend twice as much effort on a "microservice" model that actually falls under a "miniservice" or "macroservice" model. What would be even worse, is actually implementing a microservice model, and realizing no benefit in practice over a regular macroservice system. 

It's important to not force fit new technologies into situations where older technologies make do with ease. We can see this in the real world with all those gimicky tech inventions that should've never seen the light of day but were forced (the automatically feeding paint roller is a great example because in practice it is marvelously useless). A microservice architecture does have many benefits between scalabity, continuous integration, and agility and that is why huge companies like amazon, facebook, and google choose to invest in the technology. They know what it will cost them to integrate and they know how much value it will provide them with in the future, before you embark on a microservice integration it is absolutely vital that you do the same. Don't try to build rome in a day if you are making a web page. There is no need to overcomplicate problems that have been solved effectively millions of times since the inception of computer technology. Don't be like the guy who made the powered paint roller. It sounds cool but after cleaning and maintenence requires more time than a regular roller for the same result.
